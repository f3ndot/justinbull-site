{
  "name": "history.js",
  "version": "0.0.0",
  "gitHead": "8eef026daf1f130d54c6547cf041f40f91455cae",
  "readme": "Welcome to History.js (v1.7.1 - October 4 2011)\n==================\n\n[![Flattr this project](http://api.flattr.com/button/flattr-badge-large.png)](https://flattr.com/submit/auto?user_id=balupton&url=https://github.com/browserstate/history.js&title=History.js&language=&tags=github&category=software)\n\n\nThis project is the successor of [jQuery History](http://balupton.com/projects/jquery-history), it aims to:\n\n- Follow the [HTML5 History API](https://developer.mozilla.org/en/DOM/Manipulating_the_browser_history) as much as possible\n- Provide a cross-compatible experience for all HTML5 Browsers (they all implement the HTML5 History API a little bit differently causing different behaviours and sometimes bugs - History.js fixes this ensuring the experience is as expected / the same / great throughout the HTML5 browsers)\n- Provide a backwards-compatible experience for all HTML4 Browsers using a hash-fallback (including continued support for the HTML5 History API's `data`, `title`, `pushState` and `replaceState`) with the option to [remove HTML4 support if it is not right for your application](https://github.com/browserstate/history.js/wiki/Intelligent-State-Handling)\n- Provide a forwards-compatible experience for HTML4 States to HTML5 States (so if a hash-fallbacked url is accessed by a HTML5 browser it is naturally transformed into its non-hashed url equivalent)\n- Provide support for as many javascript frameworks as possible via adapters; especially [jQuery](http://jquery.com/), [MooTools](http://mootools.net/), [Prototype](http://www.prototypejs.org/) and [Zepto](http://zeptojs.com/)\n\n\n## Usage\n\n### Instant\n\nTo ajaxify your entire website with the HTML5 History API, History.js and jQuery the [Ajaxify Script](https://github.com/browserstate/ajaxify) is all you need. It's that easy.\n\n\n### Working with History.js directly\n\n``` javascript\n(function(window,undefined){\n\n\t// Prepare\n\tvar History = window.History; // Note: We are using a capital H instead of a lower h\n\tif ( !History.enabled ) {\n\t\t // History.js is disabled for this browser.\n\t\t // This is because we can optionally choose to support HTML4 browsers or not.\n\t\treturn false;\n\t}\n\n\t// Bind to StateChange Event\n\tHistory.Adapter.bind(window,'statechange',function(){ // Note: We are using statechange instead of popstate\n\t\tvar State = History.getState(); // Note: We are using History.getState() instead of event.state\n\t\tHistory.log(State.data, State.title, State.url);\n\t});\n\n\t// Change our States\n\tHistory.pushState({state:1}, \"State 1\", \"?state=1\"); // logs {state:1}, \"State 1\", \"?state=1\"\n\tHistory.pushState({state:2}, \"State 2\", \"?state=2\"); // logs {state:2}, \"State 2\", \"?state=2\"\n\tHistory.replaceState({state:3}, \"State 3\", \"?state=3\"); // logs {state:3}, \"State 3\", \"?state=3\"\n\tHistory.pushState(null, null, \"?state=4\"); // logs {}, '', \"?state=4\"\n\tHistory.back(); // logs {state:3}, \"State 3\", \"?state=3\"\n\tHistory.back(); // logs {state:1}, \"State 1\", \"?state=1\"\n\tHistory.back(); // logs {}, \"Home Page\", \"?\"\n\tHistory.go(2); // logs {state:3}, \"State 3\", \"?state=3\"\n\n})(window);\n```\n\n\n### How would the above operations look in a HTML5 Browser?\n\n1. www.mysite.com\n1. www.mysite.com/?state=1\n1. www.mysite.com/?state=2\n1. www.mysite.com/?state=3\n1. www.mysite.com/?state=4\n1. www.mysite.com/?state=3\n1. www.mysite.com/?state=1\n1. www.mysite.com\n1. www.mysite.com/?state=3\n\n> Note: These urls also work in HTML4 browsers and Search Engines. So no need for the hashbang (`#!`) fragment-identifier that google [\"recommends\"](https://github.com/browserstate/history.js/wiki/Intelligent-State-Handling).\n\n### How would they look in a HTML4 Browser?\n\n1. www.mysite.com\n1. www.mysite.com/#?state=1&_suid=1\n1. www.mysite.com/#?state=2&_suid=2\n1. www.mysite.com/#?state=3&_suid=3\n1. www.mysite.com/#?state=4\n1. www.mysite.com/#?state=3&_suid=3\n1. www.mysite.com/#?state=1&_suid=1\n1. www.mysite.com\n1. www.mysite.com/#?state=3&_suid=3\n\n> Note 1: These urls also work in HTML5 browsers - we use `replaceState` to transform these HTML4 states into their HTML5 equivalents so the user won't even notice :-)\n>\n> Note 2: These urls will be automatically url-encoded in IE6 to prevent certain browser-specific bugs.\n>\n> Note 3: Support for HTML4 browsers (this hash fallback) is optional [- why supporting HTML4 browsers could be either good or bad based on my app's use cases](https://github.com/browserstate/history.js/wiki/Intelligent-State-Handling)\n\n### What's the deal with the SUIDs used in the HTML4 States?\n\n- SUIDs (State Unique Identifiers) are used when we utilise a `title` and/or `data` in our state. Adding a SUID allows us to associate particular states with data and titles while keeping the urls as simple as possible (don't worry it's all tested, working and a lot smarter than I'm making it out to be).\n- If you aren't utilising `title` or `data` then we don't even include a SUID (as there is no need for it) - as seen by State 4 above :-)\n- We also shrink the urls to make sure that the smallest url will be used. For instance we will adjust `http://www.mysite.com/#http://www.mysite.com/projects/History.js` to become `http://www.mysite.com/#/projects/History.js` automatically. (again tested, working, and smarter).\n- It works with domains, subdomains, subdirectories, whatever - doesn't matter where you put it. It's smart.\n- Safari 5 will also have a SUID appended to the URL, it is entirely transparent but just a visible side-effect. It is required to fix a bug with Safari 5.\n\n### Is there a working demo?\n\n- Sure is, give it a download and navigate to the demo directory in your browser :-)\n- If you are after something a bit more adventurous than a end-user demo, open up the tests directory in your browser and editor - it'll rock your world and show all the vast use cases that History.js supports.\n\n\n## Download & Installation\n\n- Download History.js and upload it to your webserver. Download links: [tar.gz](https://github.com/browserstate/history.js/tarball/master) or [zip](https://github.com/browserstate/history.js/zipball/master)\n\n- Include History.js\n\n\t- For [jQuery](http://jquery.com/) v1.3+\n\n\t\t``` html\n\t\t<script src=\"http://www.yourwebsite.com/history.js/scripts/bundled/html4+html5/jquery.history.js\"></script>\n\t\t```\n\n\t- For [Mootools](http://mootools.net/) v1.3+\n\n\t\t``` html\n\t\t<script src=\"http://www.yourwebsite.com/history.js/scripts/bundled/html4+html5/mootools.history.js\"></script>\n\t\t```\n\n\t- For [Right.js](http://rightjs.org/) v2.2+\n\n\t\t``` html\n\t\t<script src=\"http://www.yourwebsite.com/history.js/scripts/bundled/html4+html5/right.history.js\"></script>\n\t\t```\n\n\t- For [Zepto](http://zeptojs.com/) v0.5+\n\n\t\t``` html\n\t\t<script src=\"http://www.yourwebsite.com/history.js/scripts/bundled/html4+html5/zepto.history.js\"></script>\n\t\t```\n\n\t- For everything else\n\n\t\t``` html\n\t\t<script src=\"http://www.yourwebsite.com/history.js/scripts/bundled/html4+html5/native.history.js\"></script>\n\t\t```\n\n> Note: If you want to only support HTML5 Browsers and not HTML4 Browsers (so no hash fallback support) then just change the `/html4+html5/` part in the urls to just `/html5/`. [Why supporting HTML4 browsers could be either good or bad based on my app's use cases](https://github.com/browserstate/history.js/wiki/Intelligent-State-Handling)\n\n\n## Get Updates\n\n- For Commit RSS/Atom Updates:\n\t- You can subscribe via the [GitHub Commit Atom Feed](http://feeds.feedburner.com/historyjs)\n- For GitHub News Feed Updates:\n\t- You can click the \"watch\" button up the top right of History.js's [GitHub Project Page](https://github.com/browserstate/history.js)\n\n\n## Get Support\n\n- History.js is maintained by people like you. If you find a bug, report it to the [GitHub Issue Tracker](https://github.com/browserstate/history.js/issues). If you've fixed a bug submit a [Pull Request](https://github.com/browserstate/history.js/pulls) and add your fork to the [Network Wiki Page](https://github.com/browserstate/history.js/wiki/Network).\n\n- If you would like paid support and trainings, or have job offers, then refer to the [Network Wiki Page](https://github.com/browserstate/history.js/wiki/Network). If you are qualified with History.js, then be sure to add your details to that page too.\n\n- If your company uses History.js on your projects, and would like to see it grow and prosper (better documentation, bugfixes, upgrades, maintenance, etc.) and would love to become a corporate sponsor then do email sponsor@bevry.me\n\n- If you would like free support for History.js, then [post your question](http://stackoverflow.com/questions/ask) on [Stackoverflow](http://stackoverflow.com/about) and be sure to use the `history.js` tag when asking your question.\n\n- If you've created a website that uses History.js, or know of one. Then be sure to add it to the [Showcase Wiki Page](https://github.com/browserstate/history.js/wiki/Showcase).\n\n- If you'd love to +1 or like this project, then be sure to tweet about it and click the \"watch\" button up the top of its [Project Page](https://github.com/browserstate/history.js).\n\n- For anything else, refer to the [History.js GitHub Wiki Site](https://github.com/browserstate/history.js/wiki).\n\nThanks! every bit of help really does make a difference!\n\n\n## Browsers: Tested and Working In\n\n### HTML5 Browsers\n\n- Firefox 4+\n- Chrome 8+\n- Opera 11.5\n- Safari 5.0+\n- Safari iOS 4.3+\n\n### HTML4 Browsers\n\n- IE 6, 7, 8, 9\n- Firefox 3\n- Opera 10, 11.0\n- Safari 4\n- Safari iOS 4.2, 4.1, 4.0, 3.2\n\n\n## Exposed API\n\n### Functions\n\n- `History.pushState(data,title,url)` <br/> Pushes a new state to the browser; `data` can be null or an object, `title` can be null or a string, `url` must be a string\n- `History.replaceState(data,title,url)` <br/> Replaces the existing state with a new state to the browser; `data` can be null or an object, `title` can be null or a string, `url` must be a string\n- `History.getState()` <br/> Gets the current state of the browser, returns an object with `data`, `title` and `url`\n- `History.getHash()` <br/> Gets the current hash of the browser\n- `History.Adapter.bind(element,event,callback)` <br/> A framework independent event binder, you may either use this or your framework's native event binder.\n- `History.Adapter.trigger(element,event)` <br/> A framework independent event trigger, you may either use this or your framework's native event trigger.\n- `History.Adapter.onDomLoad(callback)` <br/> A framework independent onDomLoad binder, you may either use this or your framework's native onDomLoad binder.\n- `History.back()` <br/> Go back once through the history (same as hitting the browser's back button)\n- `History.forward()` <br/> Go forward once through the history (same as hitting the browser's forward button)\n- `History.go(X)` <br/> If X is negative go back through history X times, if X is positive go forwards through history X times\n- `History.log(...)` <br/> Logs messages to the console, the log element, and fallbacks to alert if neither of those two exist\n- `History.debug(...)` <br/> Same as `History.log` but only runs if `History.debug.enable === true`\n\n### Events\n\n- `window.onstatechange` <br/> Fired when the state of the page changes (does not include hash changes)\n- `window.onanchorchange` <br/> Fired when the anchor of the page changes (does not include state hashes)\n\n\n## Notes on Compatibility\n\n- History.js **solves** the following browser bugs:\n\t- HTML5 Browsers\n\t\t- Chrome 8 sometimes does not contain the correct state data when traversing back to the initial state\n\t\t- Safari 5, Safari iOS 4 and Firefox 3 and 4 do not fire the `onhashchange` event when the page is loaded with a hash\n\t\t- Safari 5 and Safari iOS 4 do not fire the `onpopstate` event when the hash has changed unlike the other browsers\n\t\t- Safari 5 and Safari iOS 4 fail to return to the correct state once a hash is replaced by a `replaceState` call / [bug report](https://bugs.webkit.org/show_bug.cgi?id=56249)\n\t\t- Safari 5 and Safari iOS 4 sometimes fail to apply the state change under busy conditions / [bug report](https://bugs.webkit.org/show_bug.cgi?id=42940)\n\t\t- Google Chrome 8,9,10 and Firefox 4 prior to the RC will always fire `onpopstate` once the page has loaded / [change recommendation](http://hacks.mozilla.org/2011/03/history-api-changes-in-firefox-4/)\n\t\t- Safari iOS 4.0, 4.1, 4.2 have a working HTML5 History API - although the actual back buttons of the browsers do not work, therefore we treat them as HTML4 browsers\n\t\t- None of the HTML5 browsers actually utilise the `title` argument to the `pushState` and `replaceState` calls\n\t- HTML4 Browsers\n\t\t- Old browsers like MSIE 6,7 and Firefox 2 do not have a `onhashchange` event\n\t\t- MSIE 6 and 7 sometimes do not apply a hash even it was told to (requiring a second call to the apply function)\n\t\t- Non-Opera HTML4 browsers sometimes do not apply the hash when the hash is not `urlencoded`\n\t- All Browsers\n\t\t- State data and titles do not persist once the site is left and then returned (includes page refreshes)\n\t\t- State titles are never applied to the `document.title`\n- ReplaceState functionality is emulated in HTML4 browsers by discarding the replaced state, so when the discarded state is accessed it is skipped using the appropriate `History.back()` / `History.forward()` call\n- Data persistance and synchronisation works like so: Every second or so, the SUIDs and URLs of the states will synchronise between the store and the local session. When a new session opens a familiar state (via the SUID or the URL) and it is not found locally then it will attempt to load the last known stored state with that information.\n- URLs will be unescaped to the maximum, so for instance the URL `?key=a%20b%252c` will become `?key=a b c`. This is to ensure consistency between browser url encodings.\n- Changing the hash of the page causes `onpopstate` to fire (this is expected/standard functionality). To ensure correct compatibility between HTML5 and HTML4 browsers the following events have been created:\n\t- `window.onstatechange`: this is the same as the `onpopstate` event except it does not fire for traditional anchors\n\t- `window.onanchorchange`: this is the same as the `onhashchange` event except it does not fire for states\n- Known Issues\n\t- Opera 11 fails to create history entries when under stressful loads (events fire perfectly, just the history events fail) - there is nothing we can do about this\n\t- Mercury iOS fails to apply url changes (hashes and HTML5 History API states) - there is nothing we can do about this\n\n\n\n## History\n\nYou can discover the history inside the [History.md](https://github.com/browserstate/history.js/blob/master/History.md#files) file\n\n\n## License\n\nLicensed under the [New BSD License](http://opensource.org/licenses/BSD-3-Clause)\n<br/>Copyright &copy;  2011+ [Benjamin Arthur Lupton](http://balupton.com)\n",
  "readmeFilename": "README.md",
  "_id": "history.js@1.7.1",
  "description": "Welcome to History.js (v1.7.1 - October 4 2011) ==================",
  "commit": "8eef026daf1f130d54c6547cf041f40f91455cae",
  "repository": {
    "type": "git",
    "url": "git://github.com/browserstate/history.js.git"
  }
}